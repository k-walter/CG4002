syntax = "proto3";

import "google/protobuf/empty.proto";
option go_package = "./";

service Relay {
  rpc GetRound(google.protobuf.Empty) returns (stream RndResp) {}
  // glove (MPU6050) data for AI
  rpc Gesture(stream Data) returns (google.protobuf.Empty) {}
  // detected by infrared (KY-022 rx, KY-005 tx)
  rpc Shoot(stream Event) returns (google.protobuf.Empty) {}
  rpc Shot(stream Event) returns (google.protobuf.Empty) {}
}

// Not in use impl with MQTT
service Viz {
  rpc Update(State) returns (google.protobuf.Empty) {}
  rpc InFov(Event) returns (InFovResp) {} // Option<InFovResp>
}

service Pynq {
  rpc Emit(Data) returns (Event) {}
  rpc Poll(google.protobuf.Empty) returns (Event) {}
}

message Data {
  uint32 player = 1;
  uint64 time = 2; // No need to fill, synchronized on engine
  uint32 rnd = 3; // Fill with logical clock on relay
  // Data
  int32 roll = 4;
  int32 pitch = 5;
  int32 yaw = 6;
  int32 x = 7;
  int32 y = 8;
  int32 z = 9;
  uint32 index = 10; // 0 == reset
}

message SensorData {
  repeated Data data = 1;
}

message RndResp {
  uint32 rnd = 1;
}

message InFovResp {
  uint32 player = 1;
  uint64 time = 2;
  uint32 rnd = 3;
  bool inFov = 4;
}

message Event {
  uint32 player = 1;
  uint64 time = 2;
  uint32 rnd = 3;
  Action action = 4;

  // Action specific
  // OPTIMIZE oneof
  uint32 shootID = 5;
}

message State {
  PlayerState p1 = 1 [json_name="p1"];
  PlayerState p2 = 2 [json_name="p2"];
}

message PlayerState {
  uint32 hp = 1 [json_name="hp"];
  Action action = 2 [json_name="action"];
  uint32 bullets = 3 [json_name="bullets"];
  uint32 grenades = 4 [json_name="grenades"];
  double shield_time = 5 [json_name="shield_time"];
  uint32 shield_health = 6 [json_name="shield_health"];
  uint32 num_deaths = 7 [json_name="num_deaths"];
  uint32 num_shield = 8 [json_name="num_shield"];
}

enum Action {
    // for eval
    none = 0;
    grenade = 1;
    reload = 2;
    shoot = 3;
    logout = 4;
    shield = 5;
    // internal use
    shot = 6;
    grenaded = 7;
    shieldAvailable = 8;
    checkFov = 9; // for viz to check only, grenade to throw (after cfm with eval), grenaded to be hit
    done = 10; // for viz to signal player done for round
}
